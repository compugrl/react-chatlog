{"version":3,"sources":["components/TimeStamp.js","components/ChatEntry.js","components/ChatLog.js","App.js","registerServiceWorker.js","index.js"],"names":["TimeStamp","props","time","DateTime","fromISO","absolute","toFormat","relative","toRelative","title","ChatEntry","heartType","liked","env","id","className","sender","body","timeStamp","onClick","updatedLike","onUpdate","ChatLog","chatEntries","entries","map","entry","onUpdateLiked","App","useState","chatMessages","chatData","setLikedData","likedNum","setLikedNum","headerData","uniqueSenders","firstUser","setHeaderData","Set","person","decreaseLikes","parseInt","increaseLikes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.40d30ec6.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\n\nconst TimeStamp = (props) => {\n  const time = DateTime.fromISO(props.time);\n  const absolute = time.toFormat('MMMM Do YYYY, h:mm:ss a');\n  const relative = time.toRelative();\n\n  return <span title={absolute}>{relative}</span>;\n};\n\nexport default TimeStamp;\n","import React from 'react';\nimport './ChatEntry.css';\nimport TimeStamp from '../components/TimeStamp';\nimport PropTypes from 'prop-types';\n\nconst ChatEntry = (props) => {\n  const onLikedButtonClick = () => {\n    const updatedLike = {\n      id: props.id,\n      sender: props.sender,\n      timeStamp: props.timeStamp,\n      body: props.body,\n      liked: !props.liked,\n    };\n\n    props.onUpdate(updatedLike);\n  };\n\n  const heartType = props.liked ? '‚ù§Ô∏è' : 'ü§ç';\n\n  let idVal = false;\n  if (props.id % 2 === 0) {\n    idVal = false;\n  } else {\n    idVal = true;\n  }\n\n  const env = idVal ? 'local' : 'remote';\n\n  return (\n    <div className={`chat-entry ${env}`}>\n      <h2 className=\"entry-name\">{props.sender}</h2>\n      <section className=\"entry-bubble\">\n        <p>{props.body}</p>\n        <p className=\"entry-time\">\n          <TimeStamp time={props.timeStamp}></TimeStamp>\n        </p>\n        <button onClick={onLikedButtonClick} className=\"like\">\n          {heartType}\n        </button>\n      </section>\n    </div>\n  );\n};\n\nChatEntry.propTypes = {\n  id: PropTypes.number.isRequired,\n  sender: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  timeStamp: PropTypes.string.isRequired,\n  liked: PropTypes.bool.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n};\n\nexport default ChatEntry;\n","import React from 'react';\nimport './ChatLog.css';\nimport ChatEntry from './ChatEntry';\nimport PropTypes from 'prop-types';\n\nconst ChatLog = (props) => {\n  const chatEntries = props.entries.map((entry) => {\n    return (\n      <li className=\"chat-log\" key={entry.id}>\n        <ChatEntry\n          id={entry.id}\n          sender={entry.sender}\n          timeStamp={entry.timeStamp}\n          body={entry.body}\n          liked={entry.liked}\n          onUpdate={props.onUpdateLiked}\n        ></ChatEntry>\n      </li>\n    );\n  });\n\n  return (\n    <section>\n      <ul>{chatEntries}</ul>\n    </section>\n  );\n};\n\nChatLog.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      sender: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      timeStamp: PropTypes.string.isRequired,\n      liked: PropTypes.bool.isRequired,\n    })\n  ),\n  onUpdateLiked: PropTypes.func.isRequired,\n};\n\nexport default ChatLog;\n","import React, { useState } from 'react';\nimport './App.css';\nimport chatMessages from './data/messages.json';\nimport ChatLog from './components/ChatLog';\n\nconst App = () => {\n  const [chatData, setLikedData] = useState(chatMessages);\n  let [likedNum, setLikedNum] = useState(0);\n  let headerData = 'Chat Between ';\n\n  const setHeaderData = (uniqueSenders) => {\n    const firstUser = uniqueSenders[0];\n\n    headerData = headerData + `${firstUser}`;\n    uniqueSenders.map((sender) => {\n      if (sender !== firstUser) {\n        headerData = headerData + ` and ${sender}`;\n      }\n\n      return headerData;\n    });\n  };\n\n  const uniqueSenders = [\n    ...new Set(chatMessages.map((person) => person.sender)),\n  ];\n\n  setHeaderData(uniqueSenders);\n\n  const updateLikedData = (updatedLike) => {\n    const entries = chatData.map((entry) => {\n      if (entry.id === updatedLike.id) {\n        if (updatedLike.liked === true) {\n          increaseLikes();\n        } else {\n          decreaseLikes();\n        }\n        return updatedLike;\n      } else {\n        return entry;\n      }\n    });\n\n    setLikedData(entries);\n  };\n\n  const decreaseLikes = () => {\n    setLikedNum(parseInt((likedNum -= 1)));\n  };\n\n  const increaseLikes = () => {\n    setLikedNum(parseInt((likedNum += 1)));\n  };\n\n  return (\n    <div id=\"App\">\n      <header>\n        <h1>{headerData}</h1>\n        <p className=\"widget\" id=\"heartWidget\">\n          {likedNum} ‚ù§Ô∏ès\n        </p>\n      </header>\n      <main>\n        <ChatLog entries={chatData} onUpdateLiked={updateLikedData}></ChatLog>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}